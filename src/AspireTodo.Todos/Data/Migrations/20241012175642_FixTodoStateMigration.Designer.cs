// <auto-generated />
using System;
using AspireTodo.Todos.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AspireTodo.Todos.Migrations
{
    [DbContext(typeof(TodosDbContext))]
    [Migration("20241012175642_FixTodoStateMigration")]
    partial class FixTodoStateMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AspireTodo.Todos.Features.TodoUsers.Domains.TodoUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Family")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("TodoUsers");
                });

            modelBuilder.Entity("AspireTodo.Todos.Features.Todos.Domains.Todo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset?>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CreatorId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DeletedById")
                        .HasColumnType("integer");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Summery")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("DeletedAt");

                    b.HasIndex("IsCompleted");

                    b.ToTable("Todos");
                });

            modelBuilder.Entity("AspireTodo.Todos.Features.Todos.Saga.TodoState", b =>
                {
                    b.Property<Guid>("CorrelationId")
                        .HasColumnType("uuid");

                    b.Property<string>("CurrentState")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("UserTodosCount")
                        .HasColumnType("integer");

                    b.HasKey("CorrelationId");

                    b.ToTable("TodoStates");
                });

            modelBuilder.Entity("AspireTodo.Todos.Features.Todos.Domains.Todo", b =>
                {
                    b.HasOne("AspireTodo.Todos.Features.TodoUsers.Domains.TodoUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("AspireTodo.Todos.Features.Todos.Saga.TodoState", b =>
                {
                    b.OwnsOne("AspireTodo.Todos.Shared.TodoDto", "Todo", b1 =>
                        {
                            b1.Property<Guid>("TodoStateCorrelationId")
                                .HasColumnType("uuid");

                            b1.Property<DateTimeOffset?>("CompletedAt")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<DateTimeOffset>("CreatedAt")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<int>("Id")
                                .HasColumnType("integer");

                            b1.Property<bool>("IsCompleted")
                                .HasColumnType("boolean");

                            b1.Property<string>("Summery")
                                .HasColumnType("text");

                            b1.Property<string>("Title")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("TodoStateCorrelationId");

                            b1.ToTable("TodoStates");

                            b1.WithOwner()
                                .HasForeignKey("TodoStateCorrelationId");
                        });

                    b.Navigation("Todo")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
