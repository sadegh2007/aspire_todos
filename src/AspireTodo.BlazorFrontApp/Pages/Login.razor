@page "/login"
@using System.ComponentModel.DataAnnotations
@using AspireTodo.UserManagement.Shared
@inject NavigationManager NavigationManager
@attribute [Microsoft.AspNetCore.Authorization.AllowAnonymous]
@inject HttpClient Http
@inject ILocalStorageService LocalStorage
@inject AuthenticationStateProvider AuthStateProvider

<PageTitle>TodosList - Login</PageTitle>

<div class="w-screen h-screen flex justify-center items-center">
    <div>
        <EditForm Model="Model" OnValidSubmit="ProcessLogin" @onsubmit:preventDefault FormName="login" class="bg-base-300 w-96 rounded-xl p-5">
            <DataAnnotationsValidator />
            <label class="form-control w-full">
                <div class="label">
                    <span class="label-text">Phone Number</span>
                </div>
                <InputText placeholder="Phone Number..." @bind-Value="Model!.PhoneNumber" class="input input-bordered w-full"/>
                <ValidationMessage class="text-sm text-error" For="@(() => Model!.PhoneNumber)"/>
            </label>

            <label class="form-control w-full">
                <div class="label">
                    <span class="label-text">Password</span>
                </div>
                <InputText placeholder="Password..." type="password" @bind-Value="Model!.Password" class="input input-bordered w-full"/>
                <ValidationMessage class="text-sm text-error" For="@(() => Model!.Password)"/>
            </label>

            <button class="mt-4 btn btn-primary w-full block">
                Login
            </button>
        </EditForm>
    </div>
</div>

@code {
    class LoginRequest
    {
        [Required]
        [StringLength(11, ErrorMessage = "Phone number must be 11 digits.")]
        public string? PhoneNumber { get; set; }  
        
        [Required]
        [MinLength(6, ErrorMessage = "Minimum length of password must be 6 character at least.")]
        public string? Password { get; set; }    
    }

    [SupplyParameterFromForm]
    private LoginRequest? Model { get; set; }

    protected override void OnInitialized() => Model ??= new();

    private async Task ProcessLogin()
    {
        var result = await Http.PostAsJsonAsync("/users/api/account/login", Model);
        var response = await result.Content.ReadFromJsonAsync<TokenResponse>();

        await LocalStorage.SetItemAsync("loginData", response);
        await LocalStorage.SetItemAsStringAsync("token", response!.AccessToken);
        
        await AuthStateProvider.GetAuthenticationStateAsync();
        
        NavigationManager.NavigateTo("/");
    }
}