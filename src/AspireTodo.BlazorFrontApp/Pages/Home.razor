@page "/"
@using System.Net
@using System.Text.Json
@using System.Text.Json.Serialization
@using AspireTodo.BlazorFrontApp.Common.Auth
@using AspireTodo.BlazorFrontApp.Components
@using AspireTodo.Todos.Shared
@using Gridify
@inject Todos.HttpClient.ITodosHttpApi TodoApi
@inject NavigationManager NavManager
@attribute [Microsoft.AspNetCore.Authorization.Authorize]
@inject IToastService Toast
@inject ITokenAccessor TokenAccessor
@using AspireTodo.Todos.Events
@using AspireTodo.UserManagement.Events
@using Microsoft.AspNetCore.Http.Connections
@using Microsoft.AspNetCore.SignalR.Client
@implements IAsyncDisposable

<PageTitle>TodosList - Home</PageTitle>

<div class="w-screen h-screen flex flex-col items-center justify-center">
    <div class="bg-base-300 w-[90%] lg:w-[40%] rounded-xl p-5">
        <h1 class="text-2xl font-bold text-center mb-4">Todo App</h1>
        <div class="divider"></div>
        
        <TodoForm />
        <TodoList Todos="@Todos" Loading="@Loading" />
    </div>
</div>

@code
{
    private const int PageCount = 10;
    
    private List<TodoDto> Todos { get; set; } = [];
    private bool Loading { get; set; } = true;
    private HubConnection? HubConnection { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        await StartHubConnection();
        ConnectionDataListener();

        await LoadData();
        
        await base.OnInitializedAsync();
    }
    
    public async ValueTask DisposeAsync()
    {
        if (HubConnection is not null)
        {
            await HubConnection.DisposeAsync();
        }
    }

    private async Task LoadData()
    {
        Loading = true;

        try
        {
            var token = (await TokenAccessor.GetToken())!;
            var result = await TodoApi.ListAsync(new GridifyQuery(1, PageCount, ""), token);

            Todos = result.Data.ToList();
        }
        catch (Refit.ApiException apiException)
        {
            if (apiException.StatusCode == HttpStatusCode.Unauthorized)
            {
                NavManager.NavigateTo("/login");
            }
            else
            {
                throw;
            }
        }
        catch (Exception ex)
        {
            Toast.ShowError(ex.Message);
        }

        Loading = false;
    }
    
    private async Task StartHubConnection()
    {
        var token = (await TokenAccessor.GetToken())!;
        var hubUrl = Environment.GetEnvironmentVariable("API_URL") ?? "http://localhost:8080";
        
        HubConnection = new HubConnectionBuilder()
            // .WithUrl(Environment.GetEnvironmentVariable("API_URL") ?? "http://localhost:8080")
            .WithUrl(hubUrl + "/notifications/todosHub", options =>
            {
                options.AccessTokenProvider = async () => await Task.FromResult(token);
                options.SkipNegotiation = false;
                options.Transports = HttpTransportType.WebSockets;
            })
            .WithAutomaticReconnect()
            .Build();
        
        await HubConnection.StartAsync();
    }

    private void ConnectionDataListener()
    {
        HubConnection!.On<NotificationDataResponse>("ReceiveMessage", async (data) =>
        {
            var jsonOptions = new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true
            };

            try
            {
                if (data.Type == "TodoCreated")
                {
                    var result = JsonSerializer.Deserialize<TodoCreated>(JsonSerializer.Serialize(data.Data), jsonOptions)!;
                    
                    Todos.Insert(0, result.Todo);
                    if (result.UserTodosCount >= PageCount)
                    {
                        Todos.RemoveAt(Todos.Count-1);
                    }
                    
                    Toast.ShowSuccess("Todo created successfully.");
                }

                if (data.Type == "FailedUserUpdateTodosCount")
                {
                    var result = JsonSerializer.Deserialize<FailedUserUpdateTodosCount>(JsonSerializer.Serialize(data.Data), jsonOptions)!;
                    Toast.ShowError(result.Message ?? "There is problem to add todo, please try again.");
                }

                if (data.Type == "TodoRemoved")
                {
                    var result = JsonSerializer.Deserialize<TodoRemoved>(JsonSerializer.Serialize(data.Data), jsonOptions)!;

                    if (Todos.Count < PageCount)
                    {
                        var todo = Todos.FirstOrDefault(x => x.Id == result.TodoId);
                        if (todo != null)
                        {
                            Todos.Remove(todo);
                        }
                    }
                    else
                    {
                        await LoadData();
                    }
                    
                    Toast.ShowSuccess("Todo Removed Successfully");
                }

                StateHasChanged();
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
        });
    }

    class NotificationDataResponse
    {
        [JsonPropertyName("type")]
        public string Type { get; set; }

        [JsonPropertyName("data")]
        public object Data { get; set; }
    }
}
