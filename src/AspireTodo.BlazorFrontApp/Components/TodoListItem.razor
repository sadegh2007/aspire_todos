@using AspireTodo.BlazorFrontApp.Common.Auth
@using AspireTodo.Todos.HttpClient
@using AspireTodo.Todos.Shared
@inject IToastService Toast
@inject ITodosHttpApi TodosHttpApi
@inject ITokenAccessor TokenAccessor

<li class="relative py-3 border-b border-gray-800 flex items-center">
    @if (!InEditMode)
    {
        @if (!Loading)
        {
            <input
                type="radio"
                class="radio focus:outline-0"
                @onclick="MarkCompleted"
                checked="@(Todo.IsCompleted)"
            />  
        }
        else
        {
            <span class="loading loading-spinner"></span>
        }
    }
    <div class="@(!InEditMode ? "mx-4" : "") flex flex-col w-full">
        @if (!InEditMode)
        {
            <h2 class="font-bold text-nowrap @(Todo.IsCompleted ? "completed" : "")">@Todo.Title</h2>
            @if (!string.IsNullOrWhiteSpace(Todo.Summery))
            {
                <small>@Todo.Summery</small>
            }
        }
        else
        {
            <TodoForm @bind-UpdateDto="@Todo" @bind-IsEdit="@InEditMode" />
        }
    </div>
    
    @if (!InEditMode)
    {
        <div class="flex gap-1">
            <button @onclick="RemoveAsync" disabled="@Loading" class="focus:outline-0 btn btn-square btn-sm btn-error">
                @if (Loading)
                {
                    <span class="loading loading-sm loading-spinner"></span>
                }
                else
                {
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24"
                         fill="none"
                         stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"
                         class="icon icon-tabler icons-tabler-outline icon-tabler-trash">
                        <path stroke="none" d="M0 0h24v24H0z" fill="none"/>
                        <path d="M4 7l16 0"/>
                        <path d="M10 11l0 6"/>
                        <path d="M14 11l0 6"/>
                        <path d="M5 7l1 12a2 2 0 0 0 2 2h8a2 2 0 0 0 2 -2l1 -12"/>
                        <path d="M9 7v-3a1 1 0 0 1 1 -1h4a1 1 0 0 1 1 1v3"/>
                    </svg>
                }
            </button>
            @if (!Todo.IsCompleted)
            {
                <button @onclick="OnEdit" disabled="@Loading"
                        class="focus:outline-0 btn btn-square btn-sm btn-success">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none"
                         stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"
                         class="icon icon-tabler icons-tabler-outline icon-tabler-pencil">
                        <path stroke="none" d="M0 0h24v24H0z" fill="none"/>
                        <path d="M4 20h4l10.5 -10.5a2.828 2.828 0 1 0 -4 -4l-10.5 10.5v4"/>
                        <path d="M13.5 6.5l4 4"/>
                    </svg>
                </button>
            }
        </div>
    }
</li>

@code {
    [Parameter] 
    public TodoDto Todo { get; set; }
    
    public bool InEditMode { get; set; }

    private bool Loading { get; set; }

    private async Task MarkCompleted()
    {
        Loading = true;
        
        try
        {
            var token = (await TokenAccessor.GetToken())!;
            await TodosHttpApi.MarkCompletedAsync(Todo.Id.Value, new MarkAsCompletedRequest
            {
                IsCompleted = !Todo.IsCompleted
            }, token);

            Todo.IsCompleted = !Todo.IsCompleted;
        }
        catch (Exception ex)
        {
            Toast.ShowError(ex.Message);
        }

        Loading = false;
    }

    private async Task RemoveAsync()
    {
        Loading = true;
        
        try
        {
            var token = (await TokenAccessor.GetToken())!;
            await TodosHttpApi.RemoveAsync(Todo.Id.Value, token);
        }
        catch (Exception ex)
        {
            Toast.ShowError(ex.Message);
        }

        Loading = false;
    }

    private void OnEdit()
    {
        InEditMode = true;
    }
}